% unless ($partial) { layout 'default' }
<script>
  var root;
  window.requestFileSystem  = window.requestFileSystem || window.webkitRequestFileSystem;
  window.requestFileSystem(window.TEMPORARY, 16 * 60 * 1024 * 1024 ,
			   function(fs){
			       root = fs.root;
			       console.log('Opened file system: ' + fs.name);
			   },
			   function(e){
			       console.log(e);
			   });


  var dropzone = document.getElementById('dropzone');
  
  dropzone.addEventListener('dragover', function(e) {
      e.stopPropagation();
      e.preventDefault();
      e.dataTransfer.dropEffect = 'copy';
  });
      
dropzone.addEventListener('drop', function(e) {
      console.log('drop');
      console.log(new Date())
      e.stopPropagation();
      e.preventDefault();
      file = e.dataTransfer.files[0]; // Array of all files
      var reader = new FileReader();
      reader.onload = function(e2) { 
          src = e2.target.result;
	  var hash = md5(src);
	  var blob = new Blob([src], {type: 'text/plain'});
	  obj.setObject(src);

	  // cleanup
	  root.createReader().readEntries(function(entries){
	      var re = new RegExp('^' + hash, "i");
	      entries.forEach(function(i){
		  if (!(i.name.match(re))) { i.remove(function(){ console.log("removed " + i.name) }) }
		  else { console.log(i.name) }
	      });
	  });
	  // save file
	  root.getFile(hash + '.obj',
		       {create: true},
		       function(file) {
			   file.createWriter(function(w){
			       w.onwriteend = function(e) { console.log('Write completed.') };
			       w.write(blob);
			   }, function(e){
			       console.log('error on writing')
			   })
		       });

	  // console.log(renderers);

	  renderers = [1, 2, 3, 4, 5].map(function(i){
	      return new Iro.renderer()
	  })
	  // console.log(renderers);
	  var size;
	  scenes = renderers.map(function(r, i){
	      var scene    = new Iro.scene(r);
	      var offset = offsets[i] || offsets[0];
	      if (i == 4) {
		  scene.init({ 'obj': obj.clone(), 'lights': lights, 'offsets': page.view(offset) })
		  r.setDOMelement($('#renderer_5'));
		  scene.render()
		  size = scene.getSize();
	      } else {
		  scene.init({ 'obj': obj,  'lights': lights, 'offsets': page.view(offset) })
	      }
	      return scene;
	  })


	  var flatScene = scenes[4];
	  // flatScene.render();
	  
	  console.log('start parts')
	  console.log(new Date())

	  flatScene.obj.traverse( function ( child ) {
	      if ( child instanceof THREE.Mesh ) {
		  var m = new THREE.MeshBasicMaterial();
		  m.color.setScalar(1);
		  child.material = m;
	      }
	  } );

	  flatScene.obj.traverse( function ( child ) {
	      if ( child instanceof THREE.Mesh ) {
		  var m = new THREE.MeshBasicMaterial();
		  m.color.setScalar(0);
		  child.material = m;
		  flatScene.render();

		  var c = document.createElement('canvas');
		  c.setAttribute('width', size.width);
		  c.setAttribute('height', size.height);
		  var ctx = c.getContext('2d');
		  ctx.drawImage(flatScene.renderer.domElement, 0, 0);
		  
		  $('#canvasses').append(c)

		  var promise = new Promise(function(resolve, reject) {
		      var canvas  = c;
		      var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
		      var data = imageData.data;
		      for (var i = 0; i < data.length; i += 4) {
			  if (data[i] < 255) {
			      data[i + 3] = 255 - data[i];
			      data[i]     = 0;
			      data[i + 1] = 0;
			      data[i + 2] = 0;
			  }
		      }
		      ctx.putImageData(imageData, 0, 0);
		      if (1) {
		  	  resolve('done part');
		      } else {
		  	  reject(Error("It broke"));
		      }
		  });
		  promise.then(function(result) {
		      console.log(result); // "Stuff worked!"
		  }, function(err) {
		      console.log(err); // Error: "It broke"
		  });

		  m.color.setScalar(1);
		  child.material = m;
	      }
	  } );
	  // $('#canvasses').hide()
	  // $('#renderer_5').hide()

	  console.log('done')
	  console.log(new Date())

	  location.hash = "#single";
	  
	  flatScene.obj.traverse( function ( child ) {
	      if ( child instanceof THREE.Mesh ) {
		  var m = new THREE.MeshBasicMaterial();
		  var r = Math.random(); var g = Math.random(); var b = Math.random();
		  m.color.setRGB (r, g, b);
		  child.material = m;
	      }
	  } );


	  // SVG renderer stuff here
	  var SVGpromise = new Promise(function(resolve, reject) {
	      SVGrenderer = new THREE.SVGRenderer();
	      SVGrenderer.setClearColor( 0xf0f0f0 );
	      SVGrenderer.setSize( $('#renderer_svg').width(), $('#renderer_svg').height() );
	      SVGrenderer.setQuality( 'high' );
	      $('#renderer_svg').append(SVGrenderer.domElement)
	      SVGrenderer.render(flatScene.scene, flatScene.camera);
	      if (1) {
		  resolve(new Date());
	      } else {
		  reject(Error("It broke"));
	      }
	  });
	  SVGpromise.then(function(result) {
	      console.log('SVG done'); // "Stuff worked!"
	      console.log(result); // "Stuff worked!"
	  }, function(err) {
	      console.log(err); // Error: "It broke"
	  }); 


      }
      reader.readAsText(file);
  });
</script>
<div class="row" id="dropcontainer">
  <div class="col-md-10 col-md-offset-1">
    <div id="dropzone" class="jumbotron" style="height:80vh;">
      drop your OBJ file here
    </div>
  </div>
</div>
