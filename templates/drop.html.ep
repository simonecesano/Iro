% unless ($partial) { layout 'default' }
<script>
  var root;
  window.requestFileSystem  = window.requestFileSystem || window.webkitRequestFileSystem;
  window.requestFileSystem(window.TEMPORARY, 16 * 60 * 1024 * 1024 ,
			   function(fs){
			       root = fs.root;
			       console.log('Opened file system: ' + fs.name);
			   },
			   function(e){
			       console.log(e);
			   });


  var dropzone = document.getElementById('dropzone');
  
  dropzone.addEventListener('dragover', function(e) {
      e.stopPropagation();
      e.preventDefault();
      e.dataTransfer.dropEffect = 'copy';
  });
      
dropzone.addEventListener('drop', function(e) {
      console.log('drop');
      console.log(new Date())
      e.stopPropagation();
      e.preventDefault();
      file = e.dataTransfer.files[0]; // Array of all files
      var reader = new FileReader();
      reader.onload = function(e2) { 
          src = e2.target.result;
	  var hash = md5(src);
	  var blob = new Blob([src], {type: 'text/plain'});
	  obj.setObject(src);

	  // cleanup
	  root.createReader().readEntries(function(entries){
	      var re = new RegExp('^' + hash, "i");
	      entries.forEach(function(i){
		  if (!(i.name.match(re))) { i.remove(function(){ console.log("removed " + i.name) }) }
		  else { console.log(i.name) }
	      });
	  });
	  // save file
	  root.getFile(hash + '.obj',
		       {create: true},
		       function(file) {
			   file.createWriter(function(w){
			       w.onwriteend = function(e) { console.log('Write completed.') };
			       w.write(blob);
			   }, function(e){
			       console.log('error on writing')
			   })
		       });

	  // console.log(renderers);

	  renderers = [1, 2, 3, 4, 5].map(function(i){
	      return new Iro.renderer()
	  })
	  // console.log(renderers);
	  var size;
	  scenes = renderers.map(function(r, i){
	      var scene    = new Iro.scene(r);
	      var offset = offsets[i] || offsets[0];
	      if (i == 4) {
		  scene.init({ 'obj': obj.clone(), 'lights': lights, 'offsets': page.view(offset) })
		  r.setDOMelement($('#renderer_5'));
		  scene.render()
		  size = scene.getSize();
	      } else {
		  scene.init({ 'obj': obj,  'lights': lights, 'offsets': page.view(offset) })
	      }
	      return scene;
	  })


	  var flatScene = scenes[4];
	  // flatScene.render();
	  
	  console.log('start parts')
	  console.log(new Date())

	  flatScene.obj.traverse( function ( child ) {
	      if ( child instanceof THREE.Mesh ) {
		  var m = new THREE.MeshBasicMaterial();
		  m.color.setScalar(1);
		  child.material = m;
	      }
	  } );

	  flatScene.obj.traverse( function ( child ) {
	      if ( child instanceof THREE.Mesh ) {
		  var m = new THREE.MeshBasicMaterial();
		  m.color.setScalar(0);
		  child.material = m;
		  flatScene.render();

		  // var p = flatScene.readPixels();

		  // console.log(p.length);

		  var c = document.createElement('canvas');
		  c.setAttribute('width', size.width);
		  c.setAttribute('height', size.height);
		  var ctx = c.getContext('2d');

		  // ctx.setTransform(1, 0, 0, -1, 0, size.height);

		  // ctx.scale(-1, 1);
		  // ctx.translate(-size.width, 0);
		  
		  ctx.drawImage(flatScene.renderer.domElement, 0, 0);
		  
		  $('#canvasses').append(c)
		  
		  // var i = new ImageData(p, size.width, size.height);
		  // ctx.putImageData(i, 0, 0);
		  
		  
		  // flipping the canvas

		  // var d = document.createElement('canvas');
		  // d.width = c.width; d.height = c.height;
		  // d.getContext('2d').drawImage(c, 0, 0);

		  // ctx.clearRect(0, 0, c.width, c.height);
		  // ctx.scale(-1, 1);
		  // ctx.translate(c.width, 0);

		  // ctx.drawImage(d, 0, 0);
		  

		  m.color.setScalar(1);
		  child.material = m;
	      }
	  } );
	  // $('#canvasses').hide()
	  $('#renderer_5').hide()

	  console.log('done')
	  console.log(new Date())

	  location.hash = "#single";
      }
      reader.readAsText(file);
  });
</script>
<div class="row" id="dropcontainer">
  <div class="col-md-10 col-md-offset-1">
    <div id="dropzone" class="jumbotron" style="height:80vh;">
      drop your OBJ file here
    </div>
  </div>
</div>
