<script src="https://cdn.rawgit.com/riccardoscalco/textures/master/textures.js"></script>
% unless ($partial) {
  layout 'default'
% }
<style>
  #palettes { position:fixed; top:80px; right:2%; } 
</style>
<div id="palettes" class="col-md-2 col-md-offset-0">
  <div class="panel panel-default">
    <div class="panel-heading" role="tab" id="headingOne">
      <h4 class="panel-title">
        <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
          colors
        </a>
      </h4>
    </div>
    <div id="collapseOne" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne">
      <div class="panel-body">
	<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
	  <div id="colors" ></div>
	</div>
      </div>
    </div>
    <div class="panel-heading" role="tab" id="headingOne">
      <h4 class="panel-title">
        <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo" aria-expanded="true" aria-controls="collapseOne">
          materials
        </a>
      </h4>
    </div>
    <div id="collapseTwo" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne">
      <div class="panel-body">
	<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
	  <div id="materials">
	    <button id="material" class="btn btn-default" type="submit">material</button>
	    <button id="svg" class="btn btn-default" type="submit">svg</button>
	    <div id="scg">
	      <svg width="20" height="20"><defs><pattern id="uanrb" patternUnits="userSpaceOnUse" width="20" height="20">
		    <path d="M 0,20 l 20,-20 M -5,5 l 10,-10
			     M 15,25 l 10,-10" stroke-width="2" shape-rendering="auto" stroke="#343434"
			  stroke-linecap="square"></path></pattern></defs>
		<path d="M 0 0 L 0 140 L 140 140 L 140 0 Z"
		      style="fill: url(&quot;#uanrb&quot;) none;">
		</path>
	      </svg>
	    </div>
	  </div>
	</div>
      </div>
    </div>
  </div>
</div>
<div class="row" id="one_and_three">
  <div id="parts" class="col-md-1 col-md-offset-0"></div>
  <div id="renderer_1" class="col-md-9 col-md-offset-0 renderer"></div>
</div>
% unless ($partial) {
<script>
  var heights = ['100%'];
  var zooms   = [1.5];
</script>
<script src="/public/app/obj_multiple.js"></script>
<script src="/public/app/obj_clicker.js"></script>
% }
<script>
$(function(){
    $('#svg').on('click', function(){
	console.log('svg');
	var svg = document.getElementById("scg").querySelector("svg");
	var svgData = (new XMLSerializer()).serializeToString(svg);
	
	var canvas = document.createElement("canvas");
	var svgSize = svg.getBoundingClientRect();
	canvas.width = svgSize.width;
	canvas.height = svgSize.height;
	var ctx = canvas.getContext("2d");
	
	var img = document.createElement("img");
	img.setAttribute("src", "data:image/svg+xml;base64," + window.btoa(unescape(encodeURIComponent(svgData))) );	  
	img.onload = function() {
	    ctx.drawImage(img, 0, 0);
	    
	    var texture = new THREE.Texture(canvas);
	    texture.needsUpdate = true;
	    texture.wrapS = THREE.RepeatWrapping;
	    texture.wrapT = THREE.RepeatWrapping;
	    texture.repeat.set( 70, 70 );
	    
	    var count = 0;
	    iro.obj.traverse( function ( child ) {
		if ( child instanceof THREE.Mesh ) {
		    // var material = child.material.clone()
		    var material =
			new THREE.MeshLambertMaterial({
			    color: child.material.color,
			    map: texture
			});
		    // child.material = material.clone();
		    child.material = material;
		    count++;
		    // console.log(child.material)
		}
	    } );
	};
    })
    $('#material').on('click', function(){
	console.log('material')
	var texture = new THREE.TextureLoader().load( '/public/textures/GJSX9188.jpg',
						      function(texture){
							  texture.wrapS = THREE.RepeatWrapping;
							  texture.wrapT = THREE.RepeatWrapping;
							  texture.repeat.set( 30, 30 );
							  var count = 0;
							  
							  iro.obj.traverse( function ( child ) {
							      if ( child instanceof THREE.Mesh ) {
								  // var material = child.material.clone()
								  var material =
								      new THREE.MeshLambertMaterial({
									  color: child.material.color,
									  map: texture
								      });
								  // child.material = material.clone();
								  child.material = material;
								  count++;
								  console.log(child.material)
							      }
							  } );
						      });
    })
})
</script>
