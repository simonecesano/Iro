<script src="https://cdnjs.cloudflare.com/ajax/libs/keypress/2.1.4/keypress.min.js"></script>
<script src="https://cdn.rawgit.com/jankovicsandras/imagetracerjs/1aeb1b14/imagetracer_v1.1.2.js"></script>
<script src="/public/js/hamsters.js"></script>


% unless ($partial) {
    layout 'default'
% }
<div class="row" id="one_and_three">
  <div id="parts" class="col-md-1 col-md-offset-0">
    <button id="svg" class="btn btn-default" type="submit">svg</button>
  </div>
  <div id="renderer_1" class="col-md-9 col-md-offset-0 renderer"></div>
  <div id="progress" class="col-md-1 col-md-offset-0">
    
  </div>
  <div id="svg_1" class="col-md-9 col-md-offset-0 renderer">&nbsp;</div>
</div>
% unless ($partial) {
<script>
  var heights = ['100%'];
  var zooms   = [1.5];
</script>
<script src="/public/app/obj_multiple.js"></script>
<script src="/public/app/obj_clicker.js"></script>
% }
<script>
    var getPixels = function(gl){
	// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels
	var pixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4);
	gl.readPixels(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
	return pixels;
    };

    $(function(){
	var renderer = iro.renderers[0];
	var part_ids = [];
	var scanned_parts = [];
	var SVGs = [];
	var SVGoutput;
	var idx = 0
	var canvas = document.createElement('canvas');
	canvas.width = $(renderer.domElement).width();
	canvas.height = $(renderer.domElement).height();

	var svg_size = {};
	
	var tracer = new Worker("/public/js/tracer.js");
	tracer.onmessage = function(e) {

	    var svgstr = e.data.svg;
	    
	    scanned_parts.push(e.data.part);
	    
	    var svg = $.parseXML( svgstr )
	    svg = $(svg);
	    svg.find('path')
		.attr('fill', 'none')
	    	.attr('stroke-width', '0.5')
		.attr('stroke', 'rgb(0,0,0)');

	    $(svg).attr('viewBox', '0 0 ' + canvas.width + ' ' + canvas.height);
	    
	    var xml = svg.get(0);
	    svg_size.width = xml.documentElement.getAttribute('width');
	    svg_size.height = xml.documentElement.getAttribute('height');

	    var g = xml.createElementNS('http://www.w3.org/2000/svg', 'g');
	    g.setAttribute('transform', ['rotate(180', svg_size.width / 2, svg_size.height / 2, ')'].join(' '));

	    var node;
	    // eliminate rectangle around SVG
	    xml.documentElement.childNodes[0].remove()
	    // group nodes
	    while (xml.documentElement.hasChildNodes()) {
		node = xml.documentElement.childNodes[0];
		g.appendChild(node);
	    }
	    
	    if (SVGoutput) {
		SVGoutput.documentElement.appendChild(g);
	    } else {
		xml.documentElement.setAttribute('viewBox', [ 0, 0, svg_size.width, svg_size.height].join(' '));
		xml.documentElement.setAttribute('height', '100%');
		xml.documentElement.setAttribute('width', '100%');
		
		SVGoutput = xml;
		SVGoutput.documentElement.appendChild(g);
	    }
	    var svgstring = (new XMLSerializer()).serializeToString(SVGoutput)
	    $('#parts').html(Math.round(scanned_parts.length / part_ids.length * 100) + "%");
	    $('#svg_1').html(svgstring)
	}
	
	
	// $('#svg').click(function(){
	setTimeout(function(){
	    console.log('on svg');
	    $('#renderer_1').hide();
	    var white = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });
	    var black = new THREE.MeshBasicMaterial({ color: 0x000000 });

	    iro.obj.traverse( function ( child ) {
		if ( child instanceof THREE.Mesh) { part_ids.push(child.id); child.material = white }
	    })
	    var pixels = [];
	    console.log(part_ids.length);

	    if (part_ids.length) {
		_.each(part_ids, function(e, i){
		    var child = iro.scene.getObjectById(e);
		    child.material = black;
		    iro.render();
		    var gl = renderer.domElement.getContext("webgl");
		    tracer.postMessage({
			pixels: getPixels(gl),
			width:  gl.drawingBufferWidth, 
			height: gl.drawingBufferHeight,
			part:   e
		    });
		    pixels.push(1)
		    child.material = white;
		})
	    }
	    console.log('#1 pixels.length ' + pixels.length);
	    console.log('#2 SVGs.length ' + SVGs.length);
	}, 500)
    })
</script>
