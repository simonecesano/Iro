<script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/keypress/2.1.4/keypress.min.js"></script>
<script src="https://cdn.rawgit.com/jankovicsandras/imagetracerjs/1aeb1b14/imagetracer_v1.1.2.js"></script>
% unless ($partial) {
    layout 'default'
% }
<style>svg { position:absolute }</style>
<div class="row" id="one_and_three">
  
  <div id="parts" class="col-md-1 col-md-offset-0">
    <button id="svg" class="btn btn-default" type="submit">svg</button>
  </div>
  <div id="renderer_1"
       class="col-md-9 col-md-offset-0 renderer"
       ></div>
  <div id="parts" class="col-md-1 col-md-offset-0">
    <button id="nothing" class="btn btn-default" type="submit">nothing</button>
  </div>
  <div id="svg_1" class="col-md-9 col-md-offset-0 renderer">&nbsp;</div>
</div>
% unless ($partial) {
<script>
  var heights = ['100%'];
  var zooms   = [1.5];
</script>
<script src="/public/app/obj_multiple.js"></script>
<script src="/public/app/obj_clicker.js"></script>
% }
<script>
    $(function(){
	var renderer = iro.renderers[0];
	var part_ids = [];
	var idx = 0
	var canvas = document.createElement('canvas');
	
	canvas.width = $(renderer.domElement).width();
	canvas.height = $(renderer.domElement).height();
	var ctx = canvas.getContext("2d");
	var complete_svg;

	
	var getPixels = function(gl){
	    var pixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4);
	    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels
	    gl.readPixels(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
	    
	    // https://developer.mozilla.org/en-US/docs/Web/API/ImageData/ImageData
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray
	    // var imageData = new ImageData(Uint8ClampedArray.from(pixels), gl.drawingBufferWidth, gl.drawingBufferHeight);
	    var imageData;
	    
	    // console.log(pixels);
	    // console.log(imageData.data);
	    
	    // console.log(gl.drawingBufferWidth * gl.drawingBufferHeight * 4 );
	    
	    // console.log(imageData.data);
	    return pixels;
	    // var svgstr = ImageTracer.imagedataToSVG( imageData, { scale: 1 } );
	    // return svgstr;
	}

	var getSVG = function(pixels, gl){
	    var imageData = new ImageData(Uint8ClampedArray.from(pixels), gl.drawingBufferWidth, gl.drawingBufferHeight);
	    var svgstr = ImageTracer.imagedataToSVG( imageData, { scale: 1 } );
	    return svgstr;
	}

	var imgToSVG = function(pixels, gl) {
	    console.log('here');
	    var promise = new Promise(
		function resolver(resolve, reject) {
		    var imageData = new ImageData(Uint8ClampedArray.from(pixels), gl.drawingBufferWidth, gl.drawingBufferHeight);
		    var svgstr = ImageTracer.imagedataToSVG( imageData, { scale: 1 } );
		    console.log(svgstr);
		    return svgstr;
		}
	    );
	    promise.then(function (svgstr) {
	    	console.log(svgstr);
	    });
	    return promise;
	}
	
	$('#svg').click(function(){
	    console.log('on svg');
	    var white = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });
	    var black = new THREE.MeshBasicMaterial({ color: 0x000000 });

	    iro.obj.traverse( function ( child ) {
		if ( child instanceof THREE.Mesh) { part_ids.push(child.id); child.material = white }
	    })
	    var pixels = [];
	    console.log(part_ids.length);
	    if (part_ids.length) {
		_.each(part_ids, function(e, i){
		    var child = iro.scene.getObjectById(e);
		    child.material = black;
		    iro.render();
		    pixels.push(getPixels(renderer.domElement.getContext("webgl")));
		    child.material = white;
		})
	    }

	    
	    var promises = _.map(pixels, function(e, i){
		getSVG(e, renderer.domElement.getContext("webgl"))
	    })
	    Promise.all(promises).then(function(foo){ console.log('done ' + foo.length) })
	    console.log(pixels.length);
	})
    })
</script>
