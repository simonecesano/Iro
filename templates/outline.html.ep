<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
  <head>
    <title></title>
    <script src="/public/js/underscore-min.js"></script>
    
    <script src="/public/js/jquery-3.1.1.min.js"></script>
    <script src="/public/js/tether.min.js"></script>

    <script src="/public/bootstrap/js/bootstrap.min.js"></script>
    <link href="/public/bootstrap/css/bootstrap.min.css" media="screen" rel="stylesheet" type="text/css">
    <link  href="/public/bootstrap/css/submenu.css" media="screen" rel="stylesheet" type="text/css">
    
    <script src="/public/three/js/three.js"></script>
    <script src="/public/three/js/OBJLoader.js"></script>
    <script src="/public/three/js/FBXLoader.js"></script>
    <script src="/public/three/js/Projector.js"></script>
    <script src="/public/three/js/SVGRenderer.js"></script>
    <script src="/public/three/js/CanvasRenderer.js"></script>
    

    <script src="/public/app/iro.js"></script>
    <script src="/public/app/iro.obj.js"></script>
    <script src="/public/app/iro.page.js"></script>
    <script src="/public/app/iro.renderer.js"></script>
    <script src="/public/app/iro.scene.js"></script>
    <script src="/public/app/iro.scene.image.js"></script>
    
    
    <style>
      td.x, td.y, td.z { text-align: right; width: 5em }
      body {
         height: 100vh;
         padding-top: 0px;
      }
      #c {
	  position: fixed;
	  left: 0px;
	  width: 100%;
	  height: 100%;
	  border: solid thin red;
      }
      #canvas, #canvas2 { border: thin solid gray };
    </style>
  </head>
  <body>
    <div id="c"></div>
    %= include 'layouts/menu'
    <div class="container-fluid" style="padding-top: 70px; z-index: 1;">
      %= include 'layouts/frames', frames => 1, width => 12, vh => 80, offset => 0;
      <div class="col-md-6 col-md-offset-0" >
	<div style="width:100%;height:40vh;">
	</div>
	<div id="image" style="width:100%;height:40vh;">
	</div>
      </div>
      <div class="col-md-12 col-md-offset-0" >
	<canvas id="canvas"></canvas>
      </div>
    </div>
  </body>
  <script>
    var i = new Iro;

var lights = [
    { offset: { x: 0, y: 0, z: 70 },    shadowDarkness: 0, color: 0x777777 },
    { offset: { x: -70, y:  0, z:  0 }, shadowDarkness: 0, color: 0x777777 },
    { offset: { x:   0, y: 70, z:  0 }, shadowDarkness: 0, color: 0x777777 },
    { offset: { x: -50, y: 40, z: 70 }, shadowDarkness: 0, color: 0x777777 }
];


$(function(){
    $('.renderer').hide()
    // 

    var renderer = new Iro.renderer($('#c'));
    
    renderer.animate();

    $('.dropzone').each(function(i, e){
	console.log(i);
	console.log(e);

	var r = new Iro.scene($(e).siblings('.renderer').first(), renderer.renderer);
	
	r.init();
	r.addLights(lights);
	r.addCamera({ x: 0, y: 0, z: 70 });
	r.offsets = { x: 0, y: 70, z: 0 };
	// r.animate();
	
	$(this).get(0).addEventListener('dragover', function(e) {
    	    e.stopPropagation();
    	    e.preventDefault();
    	    e.dataTransfer.dropEffect = 'copy';
	});

	$(this).get(0).addEventListener('drop', function(e) {
	    e.stopPropagation();
	    e.preventDefault();
	    console.log('drop');
	    file = e.dataTransfer.files[0]; // Array of all files
	    var reader = new FileReader();
            reader.onload = function(e2) { // finished reading file data.
		src = e2.target.result;
		console.log(src.length);

		var o = new Iro.object;
		o.setObject(src)
		o.object.rotation.y = 90 * Math.PI / 180;
		o.object.rotation.x = 90 * Math.PI / 180;
		o.object.rotation.z = 180 * Math.PI / 180;
		r.addObject(o);

		var t = $(e.target).siblings('.renderer');
		t.show();
		$(e.target).hide();

		// console.log(o.object.__proto__.__proto__)
		var mat = new THREE.LineBasicMaterial( { color: 0x000000, linewidth: 1 } );
		var back = new THREE.MeshBasicMaterial( { color: 0xaaaaaa, side: THREE.BackSide } );
		
		o.object.traverse( function ( child ) {
		    if ( child instanceof THREE.Mesh ) {
			console.log(child.parent)
			// child.material = back;
			setTimeout(function(){
			    // console.log(child.geometry instanceof THREE.BufferGeometry)
			    var geo = new THREE.Geometry();
			    geo.fromBufferGeometry(child.geometry);
			    geo = new THREE.EdgesGeometry( geo, 180 );
			    var wireframe = new THREE.LineSegments( geo, mat );

			    child.parent.add(wireframe)
			    child.parent.remove(child);
			}, 0);
			// child.material = mat;
		    }
		});

		r.render();
		r.fitObject();
		r.render();
		renderer.scenes.push(r)
		
		
		// geo = new THREE.EdgesGeometry( geo ); // or WireframeGeometry( geometry )

		// var mat = new THREE.LineBasicMaterial( { color: 0xffffff, linewidth: 2 } );
		
		// var wireframe = new THREE.LineSegments( geo, mat );
		// o.object = wireframe;
	    }
            reader.readAsText(file);
	})
    });
})

</script>
    
</html>
